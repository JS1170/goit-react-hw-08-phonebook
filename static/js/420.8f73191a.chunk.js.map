{"version":3,"file":"static/js/420.8f73191a.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Filter/filter.module.scss?8942","components/Filter/Filter.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.scss?6b75","Redux/contacts/contactsSelector.js","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/ContactItem/contactItem.module.scss?e040","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","webpack://react-homework-template/./src/Pages/ContactsView/ContactsView.module.scss?c119","Pages/ContactsView/ContactsView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"label\":\"filter_label__fR+Y+\",\"formInput\":\"filter_formInput__WpZya\"};","import PropTypes from 'prop-types';\nimport scss from './filter.module.scss';\n\nexport function Filter({ onChangeFilter }) {\n  return (\n    <label className={scss.label}>\n      <span> Find contacts by name</span>\n      <input\n        className={scss.formInput}\n        type=\"text\"\n        name=\"filter\"\n        onChange={onChangeFilter}\n      ></input>\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  onChangeFilter: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__zqkUM\",\"formLabel\":\"ContactForm_formLabel__tYqsJ\",\"formInput\":\"ContactForm_formInput__4newl\",\"btn\":\"ContactForm_btn__iuGIk\"};","export const getContactsItems = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.contacts.filter;\n","import PropTypes from 'prop-types';\nimport scss from './ContactForm.module.scss';\nimport { Formik, ErrorMessage, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport { useSelector } from 'react-redux';\nimport { getIsLoading } from 'Redux/contacts/contactsSelector';\n\nconst FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <p>{message}</p>} />;\n};\n\nconst schema = yup\n  .object()\n  .shape({ name: yup.string().required(), number: yup.string().required() });\n\nexport function ContactForm({ submitForm }) {\n  const isLoading = useSelector(getIsLoading);\n  const baseValues = { name: '', number: '' };\n  const onSubmitChange = ({ name, number }, { resetForm }) => {\n    const newContact = { name, number };\n    submitForm(newContact);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      onSubmit={onSubmitChange}\n      initialValues={baseValues}\n      validationSchema={schema}\n    >\n      <Form className={scss.form}>\n        <label className={scss.formLabel}>\n          <span>Name</span>\n          <Field className={scss.formInput} type=\"text\" name=\"name\" />\n          <FormError name=\"name\" title=\"title\" />\n        </label>\n        <label className={scss.formLabel}>\n          <span>Number</span>\n          <Field className={scss.formInput} type=\"tel\" name=\"number\" />\n          <FormError name=\"number\" title=\"title\" />\n        </label>\n        <button className={scss.btn} type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Add contact'}\n        </button>\n      </Form>\n    </Formik>\n  );\n}\n\nContactForm.propTypes = {\n  submitForm: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"contactItem_item__ifrrP\",\"btnItem\":\"contactItem_btnItem__PLQwQ\"};","import PropTypes from 'prop-types';\nimport scss from './contactItem.module.scss';\n// import { useState } from 'react';\n// import { useSelector } from 'react-redux';\n// import { getIsLoading } from 'Redux/contacts/contactsSelector';\n\nexport function ContactItem({ id, name, number, deleteBtn }) {\n  // const [localLoading, setLocalLoading] = useState(false);\n  // const isLoading = useSelector(getIsLoading);\n\n  return (\n    <li className={scss.item}>\n      {name}: {number}\n      <button\n        className={scss.btnItem}\n        type=\"button\"\n        onClick={() => {\n          deleteBtn(id);\n          // setLocalLoading(true);\n        }}\n      >\n        Delete\n        {}\n      </button>\n    </li>\n  );\n}\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteBtn: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { ContactItem } from '../ContactItem/ContactItem';\n\n\nexport function ContactList({ contacts, deleteBtn }) {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <ContactItem\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            deleteBtn={deleteBtn}\n          ></ContactItem>\n        );\n      })}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  deleteBtn: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsView\":\"ContactsView_contactsView__FGDn+\",\"contactsViewAll\":\"ContactsView_contactsViewAll__GBQ74\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'Redux/contacts/contactsSlice';\nimport {\n  addContact,\n  deleteContact,\n  fetchContacts,\n} from '../../Redux/contacts/contactsOperations';\nimport { Filter } from '../../components/Filter/Filter';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { getIsLoggedIn } from '../../Redux/auth/authSelectors';\nimport {\n  getContactsItems,\n  getError,\n  getFilter,\n} from 'Redux/contacts/contactsSelector';\nimport { useNavigate } from 'react-router-dom';\nimport scss from './ContactsView.module.scss';\n\nexport function ContactsView() {\n  // const state = useSelector(state => state);\n  const items = useSelector(getContactsItems);\n  const filterState = useSelector(getFilter);\n  const errorState = useSelector(getError);\n  const login = useSelector(getIsLoggedIn);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  if (errorState) {\n    alert('Error)');\n    // вставить натификашку\n  }\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch, login, navigate]);\n\n  const submitFormValue = newContactObject => {\n    if (checkName(newContactObject.name)) {\n      alert(`${newContactObject.name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact(newContactObject));\n  };\n\n  const checkName = name => {\n    return items.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  const filterContacts = () => {\n    return items.filter(contact => {\n      return contact.name.toLowerCase().includes(filterState.toLowerCase());\n    });\n  };\n\n  return (\n    <div className={scss.contactsView}>\n      <div>\n        <h1>Add a new contact</h1>\n        <ContactForm submitForm={submitFormValue} />\n      </div>\n      <div className={scss.contactsViewAll}>\n        <div>\n          <h2>All your contacts</h2>\n          <Filter\n            onChangeFilter={event => dispatch(changeFilter(event.target.value))}\n          />\n        </div>\n        <div>\n          <ContactList\n            contacts={filterContacts()}\n            deleteBtn={id => dispatch(deleteContact(id))}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["Filter","onChangeFilter","className","scss","type","name","onChange","getContactsItems","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","FormError","render","message","schema","yup","shape","required","number","ContactForm","submitForm","useSelector","onSubmit","resetForm","initialValues","validationSchema","title","disabled","ContactItem","id","deleteBtn","onClick","ContactList","map","ContactsView","filterState","errorState","login","getIsLoggedIn","dispatch","useDispatch","navigate","useNavigate","alert","useEffect","fetchContacts","checkName","find","contact","toLowerCase","newContactObject","addContact","event","changeFilter","target","value","includes","deleteContact"],"sourceRoot":""}